<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_NcAxis" Id="{5d6a72a7-952e-40b3-a7e1-a70763e93c3a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_NcAxis IMPLEMENTS IAxis
VAR_IN_OUT
	sAxis		: AXIS_REF;
END_VAR
VAR_INPUT
END_VAR
VAR_OUTPUT
	bActive		: BOOL;
	bBusy		: BOOL;
	bDone		: BOOL;
	bError		: BOOL;
	iErrorId	: UDINT;
	eCurState	: E_AxisState;
END_VAR
VAR
	//PLCopen FBs for axes
	fbMcPower	: MC_Power;
	fbMcReset	: MC_Reset;
	fbMcMoveAbs	: MC_MoveAbsolute;
	fbMcMoveMod	: MC_MoveModulo;
	fbMcMoveRel	: MC_MoveRelative;
	fbMcMoveVel	: MC_MoveVelocity;

	//rising edge detection
	bExecMove_	: BOOL;
	bExecHWDiag_: BOOL;
	bExecHWRes_	: BOOL;
	bExecReset_	: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[;]]></ST>
    </Implementation>
    <Method Name="M_Diag" Id="{729848f6-f4e4-46d1-9fa1-df79f321cc5d}">
      <Declaration><![CDATA[METHOD M_Diag : BOOL
VAR_INPUT
END_VAR
VAR_OUTPUT
	bNcError 	: BOOL;
	bDrvError 	: BOOL;
	iNcErrorId	: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//get axis diag
sAxis.ReadStatus();
bNcError	:= sAxis.NcToPlc.StateDWord.31;
bDrvError	:= sAxis.NcToPlc.StateDWord.28;
iNcErrorId	:= sAxis.NcToPlc.ErrorCode;
M_Diag 		:= bNcError OR bDrvError OR (iNcErrorId <> 0);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Enable" Id="{fdc676eb-690a-4c7a-b005-8a7c7b7832e2}">
      <Declaration><![CDATA[METHOD M_Enable : BOOL
VAR_INPUT
	bEnable		: BOOL;
	fOverride	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//enable axis
fbMcPower(
	Enable		:= bEnable, 	Enable_Positive	:= bEnable,	Enable_Negative	:= bEnable, 
	Override	:= fOverride, 	Axis			:= sAxis
);
M_Enable := fbMcPower.Status;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_HardwareDiag" Id="{d206cdcd-660f-4ecd-be90-3cd912b63925}">
      <Declaration><![CDATA[METHOD M_HardwareDiag : BOOL
VAR_INPUT
	bExecute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//get hardware diag --> overwrite method if necessary
CASE eCurState OF
eAxisState_Idle:
	IF bExecute AND NOT bExecHWDiag_ THEN
		eCurState := eAxisState_Diag;
	END_IF

eAxisState_Diag:
		eCurState := eAxisState_Idle;

END_CASE

M_HardwareDiag 	:= eCurState <> eAxisState_Idle;	
bExecHWDiag_	:= bExecute;

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_HardwareReset" Id="{8e70e202-b279-4192-8eda-fe84b78fa358}">
      <Declaration><![CDATA[METHOD M_HardwareReset : BOOL
VAR_INPUT
	bExecute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//hardware reset axis --> overwrite method if necessary
CASE eCurState OF
eAxisState_Idle:
	IF bExecute AND NOT bExecHWRes_ THEN
		eCurState := eAxisState_Reset;
	END_IF

eAxisState_Reset:
		eCurState := eAxisState_Idle;

END_CASE

M_HardwareReset := eCurState <> eAxisState_Idle;	
bExecHWRes_		:= bExecute;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Move" Id="{3b7723f1-bf00-45eb-a821-f3f5c0433a7b}">
      <Declaration><![CDATA[METHOD M_Move : BOOL
VAR_INPUT
	bExecute	: BOOL;
	eMoveCmd	: E_MoveCmd;
	fVelocity	: LREAL;
	fPosition	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//move axis
CASE eCurState OF
eAxisState_Idle:	
	IF bExecute AND NOT bExecMove_ THEN
		CASE eMoveCmd OF
		eCmd_MoveAbsolute:
			fbMcMoveAbs(
				Execute	:= bExecute, 	Position:= fPosition,	Velocity:= fVelocity, 
				Axis	:= sAxis, 		Done	=> bDone,		Busy	=> bBusy, 
				Active	=> bActive, 	Error	=> bError,		ErrorID	=> iErrorId
			);
			eCurState := eAxisState_Move;
		
		eCmd_MoveModulo:
			fbMcMoveMod(
				Execute	:= bExecute, 	Position:= fPosition,	Velocity:= fVelocity, 
				Axis	:= sAxis, 		Done	=> bDone, 		Busy	=> bBusy, 
				Active	=> bActive, 	Error	=> bError,		ErrorID	=> iErrorId
			);
			eCurState := eAxisState_Move;
		
		eCmd_MoveRelative:
			fbMcMoveRel(
				Execute	:= bExecute, 	Distance:= fPosition,	Velocity:= fVelocity, 
				Axis	:= sAxis, 		Done	=> bDone,		Busy	=> bBusy, 
				Active	=> bActive, 	Error	=> bError,		ErrorID	=> iErrorId
			);
			eCurState := eAxisState_Move;
		
		eCmd_MoveVelocity:
			fbMcMoveVel(
				Execute	:= bExecute, 	Velocity:= fVelocity,	Axis	:= sAxis, 
				InVelocity=> bDone,		Busy	=> bBusy,		Active	=> bActive, 
				Error	=> bError, 		ErrorID	=> iErrorId,	Busy	=> bBusy,
				Active	=> bActive,		Error	=> bError,		ErrorID	=> iErrorId
			);		
			eCurState := eAxisState_Move;
		END_CASE
	END_IF
		
eAxisState_Move:
	CASE eMoveCmd OF
	eCmd_MoveAbsolute:
		fbMcMoveAbs(
			Execute	:= TRUE, 		Position:= fPosition,	Velocity:= fVelocity, 
			Axis	:= sAxis, 		Done	=> bDone,		Busy	=> bBusy, 
			Active	=> bActive, 	Error	=> bError, 		ErrorID	=> iErrorId
		);
		IF bDone OR bError THEN
			fbMcMoveAbs(Execute	:= FALSE,Axis := sAxis); 
			eCurState := eAxisState_Idle;
		END_IF
	
	eCmd_MoveModulo:
		fbMcMoveMod(
			Execute	:= TRUE, 		Position:= fPosition,	Velocity:= fVelocity, 
			Axis	:= sAxis, 		Done	=> bDone,		Busy	=> bBusy, 
			Active	=> bActive, 	Error	=> bError,		ErrorID	=> iErrorId
		);
		IF bDone OR bError THEN
			fbMcMoveMod(Execute	:= FALSE,Axis := sAxis); 
			eCurState := eAxisState_Idle;
		END_IF
	
	eCmd_MoveRelative:
		fbMcMoveRel(
			Execute	:= TRUE, 		Distance:= fPosition,	Velocity:= fVelocity, 
			Axis	:= sAxis, 		Done	=> bDone,		Busy	=> bBusy, 
			Active	=> bActive, 	Error	=> bError,		ErrorID	=> iErrorId
		);
		IF bDone OR bError THEN
			fbMcMoveRel(Execute	:= FALSE,Axis := sAxis); 
			eCurState := eAxisState_Idle;
		END_IF
	
	eCmd_MoveVelocity:
		fbMcMoveVel(
			Execute	:= TRUE, 		Velocity:= fVelocity,	Axis	:= sAxis, 
			InVelocity=> bDone,		Busy	=> bBusy,		Active	=> bActive, 
			Error	=> bError, 		ErrorID	=> iErrorId,	Busy	=> bBusy, 		
			Active	=> bActive,		Error	=> bError,		ErrorID	=> iErrorId
		);		
		IF bDone OR bError THEN
			fbMcMoveVel(Execute	:= FALSE,Axis := sAxis); 
			eCurState := eAxisState_Idle;
		END_IF
	END_CASE
END_CASE

M_Move 		:= (eCurState <> eAxisState_Idle);
bExecMove_	:= bExecute;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{0f519abd-36cc-4cff-9aac-6b63e33df967}">
      <Declaration><![CDATA[METHOD M_Reset : BOOL
VAR_INPUT
	bExecute	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//reset nc axis
CASE eCurState OF
eAxisState_Idle:
	IF bExecute AND NOT bExecReset_ THEN
		fbMcReset(
			Execute	:= bExecute, 	Axis	:= sAxis,	Done	=> bDone, 
			Busy	=> bBusy, 		Error	=> bError,	ErrorID	=> iErrorId 
		);
		eCurState := eAxisState_Reset;
	END_IF

eAxisState_Reset:
	fbMcReset(
		Execute	:= FALSE, 	Axis	:= sAxis,	Done	=> bDone, 
		Busy	=> bBusy, 	Error	=> bError,	ErrorID	=> iErrorId 
	);
	IF fbMcReset.Done OR fbMcReset.Error THEN
		eCurState := eAxisState_Idle;
	END_IF
END_CASE

M_Reset 	:= eCurState <> eAxisState_Idle;	
bExecReset_	:= bExecute;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_NcAxis">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_Diag">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_Enable">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_HardwareDiag">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_HardwareReset">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_Move">
      <LineId Id="3" Count="89" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NcAxis.M_Reset">
      <LineId Id="3" Count="21" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>